library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(readxl)
# Define paths for data files
MLML_Path <- "C:\Users\jsaracen\Desktop\ENDAS-DaveB\Data\MLML"
# Define paths for data files
MLML_Path <- "C:/Users/jsaracen/Desktop/ENDAS-DaveB/Data/MLML"
PNNL_Path <- "C:/Users/jsaracen/Desktop/ENDAS-DaveB/Data/PNNL"
# Create character vectors of all data files
MLML_Files <- dir(MLML_Path, pattern = ".xls", recursive = T, full.names = T)
MLML_Files
PNNL_Files <- dir(PNNL_Path, pattern = "SWAMP.xlsx", full.names = T)
PNNL_Files
getwd()
# Define paths for data files
MLML_Path <- "C:/Users/jsaracen/Desktop/ENDAS-DaveB/Data/MLML"
PNNL_Path <- "C:/Users/jsaracen/Desktop/ENDAS-DaveB/Data/PNNL"
# Create character vectors of all data files
MLML_Files <- dir(MLML_Path, pattern = ".xls", recursive = T, full.names = T)
MLML_Files
PNNL_Files <- dir(PNNL_Path, pattern = "SWAMP.xlsx", full.names = T)
# Remove some of the files from the vectors
MLML_Files <- MLML_Files[-c(7, 8, 11)]
PNNL_Files <- PNNL_Files[-1]
?purrr
?map
# Combine all of the data
MLML_Data <- map_dfr(MLML_Files, read_excel)
View(MLML_Data)
install.packages("RCurl")
# r download csv from url
# gives additional functions to handle secure https
library (RCurl)
download <- getURL("http://berkeleyearth.lbl.gov/auto/Local/TAVG/Text/37.78N-122.03W-TAVG-Trend.txt")
data <- read.csv (text = download)
# r download csv from url
# gives additional functions to handle secure https
library (RCurl)
download <- getURL("http://berkeleyearth.lbl.gov/auto/Local/TAVG/Text/37.78N-122.03W-TAVG-Trend.txt")
data <- read.csv (text = download)
library(glue)
# check and install packages
packages = c('DBI', 'RPostgres', 'ggplot2', 'lubridate', 'glue')
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#setup db connection and connect
usr = "usr"
pw <- {"your_password"}
pw <- {"pass"}
con <- dbConnect(RPostgres::Postgres(), dbname = "strends", host = "localhost",
port = 5432, password = pw, user = usr,
bigint = c("integer64", "integer", "numeric", "character"))
tablenames_filename = "tablenames.txt"
tablenames = read.csv(tablenames_filename, header=FALSE,stringsAsFactors=FALSE)
# define a table to query
table_name = tablenames[3,"V1"]#"pumpmatrix"
setwd("~/Python Scripts/strends-report/strends-report/examples")
tablenames_filename = "tablenames.txt"
tablenames = read.csv(tablenames_filename, header=FALSE,stringsAsFactors=FALSE)
# define a table to query
table_name = tablenames[3,"V1"]#"pumpmatrix"
#or query db using dplyr syntax
# Connect to local PostgreSQL via dplyr
localdb <- src_postgres(dbname = dbname,
host = 'localhost',
port = 5432,
user = usr,
password = pw)
# delete the pw from memory for security reasons
rm(pw)
# query data as a tidy dataframe
d = tbl(localdb, table_name)
#or query db using dplyr syntax
# Connect to local PostgreSQL via dplyr
localdb <- src_postgres(dbname = dbname,
host = 'localhost',
port = 5432,
user = usr,
password = pw)
# delete the pw from memory for security reasons
rm(pw)
# query data as a tidy dataframe
d = tbl(localdb, "pumpmatrix")
#or query db using dplyr syntax
# Connect to local PostgreSQL via dplyr
localdb <- src_postgres(dbname = dbname,
host = 'localhost',
port = 5432,
user = usr,
password = pw)
table_name
tbl_sql <- glue_sql("SELECT * FROM emp_wq_field WHERE StationCode = ?")
emp_wq_field <- dbSendQuery(con, airport_sql)
dbBind(emp_wq_field, list("D10"))
dbFetch(emp_wq_field)
tbl_sql <- glue_sql("SELECT * FROM emp_wq_field WHERE StationCode = ?")
emp_wq_field <- dbSendQuery(con, tbl_sql)
station_code <- "D10"
tbl_sql <- sqlInterpolate(con, "SELECT * FROM emp_wq_field WHERE StationCode = ?code",
code = station_code)
tbl_sql
emp_wq_field <- dbGetQuery(con, tbl_sql)
station_code <- "D10"
tbl_sql <- sqlInterpolate(con, "SELECT * FROM emp_wq_field WHERE emp_wq_field.StationCode = ?code",
code = station_code)
emp_wq_field <- dbGetQuery(con, tbl_sql)
station_code <- "D10"
tbl_sql <- sqlInterpolate(con, "SELECT * FROM emp_wq_field WHERE 'StationCode' = ?code",
code = station_code)
emp_wq_field <- dbGetQuery(con, tbl_sql)
station_code <- "C10"
tbl_sql <- sqlInterpolate(con, "SELECT * FROM emp_wq_field WHERE 'StationCode' = ?code",
code = station_code)
emp_wq_field <- dbGetQuery(con, tbl_sql)
?dbGetQuery
localdb <- src_postgres(dbname = dbname,
host = 'localhost',
port = 5432,
user = usr,
password = pw)
library(dplyr, warn.conflicts = FALSE)
usr = "usr"
dbname = "strends"
pw <- {"your_password"}
pw <- {"pass"}
# Connect to local PostgreSQL via dplyr
localdb <- src_postgres(dbname = dbname,
host = 'localhost',
port = 5432,
user = usr,
password = pw)
tablenames_filename = "tablenames.txt"
tablenames = read.csv(tablenames_filename, header=FALSE,stringsAsFactors=FALSE)
# define a table to query
table_name = tablenames[3,"V1"]#"emp_wq_field"
# query data as a tidy dataframe
d = tbl(con, table_name)
# query db using dplyr syntax
# Connect to local PostgreSQL via dplyr
con <- src_postgres(dbname = dbname,
host = 'localhost',
port = 5432,
user = usr,
password = pw)
tablenames_filename = "tablenames.txt"
tablenames = read.csv(tablenames_filename, header=FALSE,stringsAsFactors=FALSE)
# define a table to query
table_name = tablenames[3,"V1"]#"emp_wq_field"
# query data as a tidy dataframe
d = tbl(con, table_name)
View(localdb)
View(localdb)
# Driver Script to connect to the status and trends postgress db
# and plot some data
# check and install packages -This isnt nice so only check to see if they are there and
# leave it to the user to install them
packages = c('ggplot2', 'lubridate', 'dplyr', 'dbplyr')
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#setup db connection and connect
usr = "usr"
dbname = "strends"
pw <- {"your_password"}
pw <- {"pass"}
# query db using dplyr syntax
# Connect to local PostgreSQL via dplyr
con <- src_postgres(dbname = dbname,
host = 'localhost',
port = 5432,
user = usr,
password = pw)
tablenames_filename = "tablenames.txt"
tablenames = read.csv(tablenames_filename, header=FALSE,stringsAsFactors=FALSE)
# define a table to query
table_name = tablenames[3,"V1"]#"emp_wq_field"
# query data as a tidy dataframe
d = tbl(con, table_name)
d
group_by(AnalyteName)
datatbl = tbl(con, table_name)
summary <- datatbl %>%
group_by(StationCode) %>%
group_by(AnalyteName) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
arrange(desc(StationCode))
summary %>% show_query()
summary <- datatbl %>%
group_by(StationCode) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
arrange(desc(StationCode))
summary %>% show_query()
summary <- datatbl %>%
group_by(StationCode) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
arrange(desc(StationCode))
summary %>% show_query()
summary %>% collect()
summary <- datatbl %>%
group_by(StationCode) %>%
group_by(AnalyteName) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
arrange(desc(StationCode))
summary %>% show_query()
summary %>% collect()
summary <- datatbl %>%
group_by(AnalyteName) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
arrange(desc(StationCode))
summary %>% show_query()
summary %>% collect()
summary <- datatbl %>%
group_by(AnalyteName)
summary
summary <- datatbl %>%
group_by(AnalyteName) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
arrange(desc(AnalyteName))
summary %>% show_query()
summary %>% collect()
View(summary)
out <- summary %>% collect()
`summary <- datatbl %>%
filter(StationCode="D10")`
datatbl = tbl(con, table_name)
datatbl
View(summary)
summary <- datatbl %>%
filter(StationCode="D10")
summary %>% show_query()
out <- summary %>% collect()
summary <- datatbl %>%
filter(StationCode=="D10")
summary %>% show_query()
out <- summary %>% collect()
station <-"D10"
summary <- datatbl %>%
filter(StationCode==station)
group_by(AnalyteName) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
arrange(desc(AnalyteName))
summary %>% show_query()
out <- summary %>% collect()
station <-"D10"
summary <- datatbl %>%
filter(StationCode==station)
summary %>% show_query()
out <- summary %>% collect()
out %>% group_by(AnalyteName)
station <-"D10"
summary <- datatbl %>%
filter(StationCode==station)
group_by(AnalyteName) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
#arrange(desc(AnalyteName))
summary %>% show_query()
out <- summary %>% collect()
station <-"D10"
summary <- datatbl %>%
filter(StationCode==station)  %>%
group_by(AnalyteName) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
#arrange(desc(AnalyteName))
summary %>% show_query()
out <- summary %>% collect()
station <-"D10"
summary <- datatbl %>%
filter(StationCode==station)  %>%
group_by(AnalyteName) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
arrange(desc(AnalyteName))
summary %>% show_query()
out <- summary %>% collect()
out
wqf_table_name = tablenames[3,"V1"]#"emp_wq_field"
# query emp field water quality data as a tidy dataframe, ala https://dbplyr.tidyverse.org/
wqf_datatbl = tbl(con, wqf_table_name)
#calculate the average of all water quality parameters at station d10
station <-"D10"
summary <- wqf_datatbl %>%
filter(StationCode==station)  %>%
group_by(AnalyteName) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
arrange(desc(AnalyteName))
tablenames_filename = "tablenames.txt"
tablenames = read.csv(tablenames_filename, header=FALSE,stringsAsFactors=FALSE)
# define a table to query
wqf_table_name = tablenames[3,"V1"]#"emp_wq_field"
# query emp field water quality data as a tidy dataframe, ala https://dbplyr.tidyverse.org/
wqf_datatbl = tbl(con, wqf_table_name)
#calculate the average of all water quality parameters at station d10
station <-"D10"
summary <- wqf_datatbl %>%
filter(StationCode==station)  %>%
group_by(AnalyteName) %>%
summarise(Result = mean(Result, na.rm = TRUE)) %>%
arrange(desc(AnalyteName))
summary %>% show_query()
wqf_out <- summary %>% collect()
table_name = tablenames[1,"V1"]#"outflow"
table_name = tablenames[1,"V1"]#"flow_index"
flow_table_name = tablenames[1,"V1"]#"flow_index"
flow_datatbl = tbl(con, flow_table_name)
flow_datatbl
flow_datatbl$Date
flow_out = flow_datatbl %>% collect()
flow_out$Datesimple  <-mdy(flow_out$Date)
flow_table_name = tablenames[1,"V1"]#"flow_index"
flow_datatbl = tbl(con, flow_table_name) #write the query
flow_out = flow_datatbl %>% collect() #get the data tinto a tidy datafrae
#convert the non standard date col to a date obj for plotting
flow_out$Datesimple  <-mdy(flow_out$Date)
#plot the data
p = ggplot(data=df_postgres, aes(x=Datesimple, y=as.numeric(OUT)))
p + geom_line() + xlab("Date") + ylab("Daily Outflow (cfs)")
#plot the data
p = ggplot(data=flow_out, aes(x=Datesimple, y=as.numeric(OUT)))
p + geom_line() + xlab("Date") + ylab("Daily Outflow (cfs)")
tablenames
packages = c('ggplot2', 'lubridate', 'dplyr', 'dbplyr')
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
#    install.packages(package)
library(package, character.only=T)
}
}
