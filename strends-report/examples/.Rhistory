library("Rpostgres")
install.packages("Rpostgres")
install.packages("RPostgres")
run <- postgresHasDefault()
library(RPostgres)
library(DBI)
run <- postgresHasDefault()
# Driver Script to connect to the status and trends postgress db
# install.packages("RPostgreSQL")
#require("RPostgreSQL")
library(RPostgres)
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
usr = "usr"
pw <- {
"pass"
}
dbConnect(drv, dbname = "strends", host = "localhost",
port = 5432, password = pw, user = usr,
bigint = c("integer64", "integer", "numeric", "character"))
rm(pw)
# check for the cartable
dbExistsTable(con, "flow_index")
# Driver Script to connect to the status and trends postgress db
# install.packages("RPostgreSQL")
#require("RPostgreSQL")
library(RPostgres)
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
usr = "usr"
pw <- {
"pass"
}
con <- dbConnect(drv, dbname = "strends", host = "localhost",
port = 5432, password = pw, user = usr,
bigint = c("integer64", "integer", "numeric", "character"))
rm(pw)
# check for the cartable
dbExistsTable(con, "flow_index")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# Driver Script to connect to the status and trends postgress db
# install.packages("RPostgreSQL")
require("RPostgreSQL")
library(RPostgres)
install.packages(RPostgreSQL)
install.packages("RPostgreSQL")
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
usr = "usr"
pw <- {
"pass"
}
con <- dbConnect(drv, dbname = "strends", host = "localhost",
port = 5432, password = pw, user = usr,
bigint = c("integer64", "integer", "numeric", "character"))
rm(pw)
# check for the cartable
dbExistsTable(con, "flow_index")
# loads the PostgreSQL driver
drv = dbDriver("PostgreSQL")
con <- dbConnect(RPostgres::Postgres(), dbname = "strends", host = "localhost",
port = 5432, password = pw, user = usr,
bigint = c("integer64", "integer", "numeric", "character"))
library(RPostgres)
library(DBI)
# loads the PostgreSQL driver
#drv = dbDriver("PostgreSQL")
usr = "usr"
pw <- {
"pass"
}
con <- dbConnect(RPostgres::Postgres(), dbname = "strends", host = "localhost",
port = 5432, password = pw, user = usr,
bigint = c("integer64", "integer", "numeric", "character"))
rm(pw)
# check for the cartable
dbExistsTable(con, "flow_index")
if(dbExistsTable(con, "flow_index"))==TRUE{
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from cartable")
}
table_name = "flow_index"
query_str =paste("SELECT * from", flow_index)
source('~/Python Scripts/strends-report/examples/drivr.R', echo=TRUE)
query_str =paste("SELECT * from", table_name)
if(dbExistsTable(con, table_name)==TRUE){
# query the data from postgreSQL
df_postgres <- dbGetQuery(con,query_str )
}
require("RPostgres")
# check and install packages
for (package in c('DBI', 'RPostgres')) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
data(mtcars)
df <- data.frame(carname = rownames(mtcars),
mtcars,
row.names = NULL)
df$carname <- as.character(df$carname)
# check and install packages
pacakges = c('DBI', 'RPostgres', 'ggplot2')
for (package in pacakges) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
as.POSIXct(df$Date, format = "%d-%b-Y")
as.POSIXct(df$Date, format = "%d-%b-%Y")
dts = c("2005-10-21 18:47:22")
dts = c("2005-10-21 18:47:22"
as.POSIXlt(dts)
dts = c("2005-8-21 18:47:22")
as.POSIXlt(dts)
dts = c("2005-Aug-21 18:47:22")
as.POSIXlt(dts)
dts = c("2005-8-21 18:47:22", format = "%d-%b-Y")
dts = c("2005-8-21 18:47:22")
as.POSIXlt(dts,format= "%d-%b-Y")
as.POSIXlt(dts,format= "%d-%m-Y")
# check and install packages
pacakges = c('DBI', 'RPostgres', 'ggplot2','lubridate')
# check and install packages
packages = c('DBI', 'RPostgres', 'ggplot2','lubridate')
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
mdy?
mdy?
yms?
ymd(dts)
ymd(1-Oct-16)
ymd("1-Oct-16")
ymd("May 11, 1996 12:05")
ymd(c("1-Oct-16"))
begin <- c("May 11, 1996 12:05", "September 12, 2001 1:00", "July 1, 1988 3:32")
ymd(begin)
(begin <- mdy_hm(begin, tz = "US/Eastern"))
mdy(c("1-Oct-16"))
dmy(c("1-Oct-16"))
df_postgres$fmt_date <- dmy(df$Date)
dmy(df$Date)
df$Date
source('~/Python Scripts/strends-report/examples/drivr.R', echo=TRUE)
dmy(df_postgres$Date)
df_postgres$posixDate  <- as.POSIXct(df_postgres$fmt_date, format = "%Y-%m-%d")
df_postgres$posixDate  <- as.POSIXct(dmy(df_postgres$Date), format = "%Y-%m-%d")
ggplot(df_postgres.TOT, aes(posixDate, TOT)) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Outflow")
df_postgres.TOT
df_postgres
dmy(df_postgres$Date)
as.POSIXct(dmy(df_postgres$Date), format = "%Y-%m-%d")
as.Date(as.POSIXct(dmy(df_postgres$Date), 'PST', format = "%Y-%m-%d"))
df_postgres$posixDate  <-as.Date(as.POSIXct(dmy(df_postgres$Date), 'PST', format = "%Y-%m-%d"))
ggplot(df_postgres.TOT, aes(posixDate, TOT)) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Outflow")
ggplot(df_postgres$TOT, aes(posixDate, TOT)) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Outflow")
f_postgres$TOT
df_postgres$TOT
df_postgres.TOT
head(df_postgres)
list(df_postgres.columns.values)
colnames(df_postgres)
as.POSIXct(dmy(df_postgres$Date))
as.POSIXlt(dmy(df_postgres$Date))
df_postgres$posixDate  <-as.POSIXlt(dmy(df_postgres$Date), 'PST', format = "%Y-%m-%d")
df_postgres$posixDate
df_postgres$posixDate  <-as.POSIXlt(dmy(df_postgres$Date), tz='PST', format = "%Y-%m-%d")
df_postgres$posixDate
?dmy
as.POSIXlt(Sys.time(), "GMT") # the current time in UTC
as.POSIXlt(Sys.time(), "PST") # the current time in UTC
as.POSIXlt(Sys.time(), "EST") # the current time in UTC
as.POSIXlt(Sys.time(), "PDT") # the current time in UTC
as.POSIXlt(Sys.time(), "America/Pacific") # the current time in UTC
as.POSIXlt(Sys.time(),  tz="America/Los_Angeles") # the current time in UTC
df_postgres.YOLO
ggplot(data=df_postgres, aes(x=posixDate, yTOT))
ggplot(data=df_postgres, aes(x=posixDate, TOT))
ggplot(data=df_postgres, aes(x=posixDate, y=TOT))
df_postgres$posixDatetime  <-as.POSIXct(dmy(df_postgres$Date),tz="America/Los_Angeles", format = "%Y-%m-%d")
ggplot(data=df_postgres, aes(x=posixDatetime, y=TOT))
as.POSIXct(dmy(df_postgres$Date))
as.Date(as.POSIXct(df_postgres$Datetime))
df_postgres$Datetime  <- as.POSIXct(dmy(df_postgres$Date),tz="America/Los_Angeles", format = "%Y-%m-%d")
df_postgres$DateSimple  <- as.Date(df_postgres$Datetime)
ggplot(data=df_postgres, aes(x=Datetime, y=TOT) + geom_line() +
scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Outflow"))
ggplot(data=df_postgres, aes(x=Datetime, y=TOT) + geom_line() +
scale_x_date(format = "%m-%Y") + xlab("") + ylab("Daily Outflow"))
ggplot(data=df_postgres, aes(x=Datetime, y=TOT) + geom_line() +
scale_x_date(format = "%mon-%Y") + xlab("Date") + ylab("Daily Outflow"))
scale_x_date(date_breaks = "1 year", date_labels = "%B-%y")
ggplot(data=df_postgres, aes(x=Datetime, y=TOT) + geom_line() +
scale_x_date(date_breaks = "1 year", date_labels = "%B-%y") + xlab("Date") + ylab("Daily Outflow"))
ggplot(data=df_postgres, aes(x=Datetime, y=TOT) + geom_line() + xlab("Date") + ylab("Daily Outflow"))
p = ggplot(data=df_postgres, aes(x=Datetime, y=TOT))
figure = p + geom_line() + xlab("Date") + ylab("Daily Outflow")
ggplot(data=df_postgres, aes(x=Datetime, y=TOT))+ geom_line() + xlab("Date") + ylab("Daily Outflow")
install.packages('scale')
ggplot(data=df_postgres, aes(x=Datetime, y=as.float(TOT)))
as.float64(TOT)
ggplot(data=df_postgres, aes(x=Datetime, y=as.numeric(TOT)))
p = ggplot(data=df_postgres, aes(x=Datetime, y=as.numeric(TOT)))+ geom_line() + xlab("Date") + ylab("Daily Outflow")
ggplot(data=df_postgres, aes(x=Datetime, y=as.numeric(TOT)))+ geom_line() + xlab("Date") + ylab("Daily Outflow")
if(dbExistsTable(con, table_name)==TRUE){
# query the data from postgreSQL
df_postgres <- dbGetQuery(con,query_str )
}
as.POSIXct(mdy(df_postgres$Date),tz="America/Los_Angeles", format = "%m/%d/%Y")
df_postgres$Datetime  <- as.POSIXct(mdy(df_postgres$Date),tz="America/Los_Angeles", format = "%m/%d/%Y")
df_postgres$DateSimple  <- as.Date(df_postgres$Datetime)
ggplot(data=df_postgres, aes(x=DateSimple, y=as.numeric(OUT)))
ggplot(data=df_postgres, aes(x=Datetime, y=as.numeric(OUT)))
ggplot(data=df_postgres, aes(x=DateSimple, y=as.numeric(OUT)))
p + geom_line() + xlab("Date") + ylab("Daily Outflow")
p = ggplot(data=df_postgres, aes(x=DateSimple, y=as.numeric(OUT)))
figure = p + geom_line() + xlab("Date") + ylab("Daily Outflow")
p + geom_line() + xlab("Date") + ylab("Daily Outflow")
df_postgres$Date  <- as.Date(df_postgres$Datetime)
if(dbExistsTable(con, table_name)==TRUE){
# query the data from postgreSQL
df_postgres <- dbGetQuery(con,query_str )
}
df_postgres$Datesimple  <-mdy(df_postgres$Date)
ggplot(data=df_postgres, aes(x=Datesimple, y=as.numeric(OUT)))
df_postgres$Datetime  <- as.POSIXct(mdy(df_postgres$Date),tz="America/Los_Angeles", format = "%m/%d/%Y")
ggplot(data=df_postgres, aes(x=Datetime, y=as.numeric(OUT)))
p = ggplot(data=df_postgres, aes(x=Datetime, y=as.numeric(OUT)))
figure = p + geom_line() + xlab("Date") + ylab("Daily Outflow")
p = ggplot(data=df_postgres, aes(x=Datetime, y=as.numeric(OUT)))
p + geom_line() + xlab("Date") + ylab("Daily Outflow")
p = ggplot(data=df_postgres, aes(x=Datesimple, y=as.numeric(OUT)))
p + geom_line() + xlab("Date") + ylab("Daily Outflow")
df_postgres$Datesimple  <-mdy(df_postgres$Date)
df_postgres$Datesimple  <- as.Date(df_postgres$Datetime)
df_postgres$Datesimple  <-mdy(df_postgres$Date)
# Driver Script to connect to the status and trends postgress db
# and plot some data
# check and install packages
packages = c('DBI', 'RPostgres', 'ggplot2','lubridate','scale')
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
usr = "usr"
pw <- {"pass"}
con <- dbConnect(RPostgres::Postgres(), dbname = "strends", host = "localhost",
port = 5432, password = pw, user = usr,
bigint = c("integer64", "integer", "numeric", "character"))
rm(pw)
# check for the flow_index table
table_name = "flow_index"
# construct a SQL query
query_str =paste("SELECT * from", table_name)
# query data and load into a daframe
if(dbExistsTable(con, table_name)==TRUE){
# query the data from postgreSQL
df_postgres <- dbGetQuery(con,query_str )
}
#convert the non standard date col to a POSIX date obj
#df_postgres$Datetime  <- as.POSIXct(mdy(df_postgres$Date),tz="America/Los_Angeles", format = "%m/%d/%Y")
#df_postgres$Datesimple  <- as.Date(df_postgres$Datetime)
df_postgres$Datesimple  <-mdy(df_postgres$Date)
#plot the data
p = ggplot(data=df_postgres, aes(x=Datesimple, y=as.numeric(OUT)))
p + geom_line() + xlab("Date") + ylab("Daily Outflow")
# Driver Script to connect to the status and trends postgress db
# and plot some data
# check and install packages
packages = c('DBI', 'RPostgres', 'ggplot2','lubridate')
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
usr = "usr"
pw <- {"pass"}
con <- dbConnect(RPostgres::Postgres(), dbname = "strends", host = "localhost",
port = 5432, password = pw, user = usr,
bigint = c("integer64", "integer", "numeric", "character"))
rm(pw)
# check for the flow_index table
table_name = "flow_index"
# construct a SQL query
query_str =paste("SELECT * from", table_name)
# query data and load into a daframe
if(dbExistsTable(con, table_name)==TRUE){
# query the data from postgreSQL
df_postgres <- dbGetQuery(con,query_str )
}
#convert the non standard date col to a date obj for plotting
df_postgres$Datesimple  <-mdy(df_postgres$Date)
#plot the data
p = ggplot(data=df_postgres, aes(x=Datesimple, y=as.numeric(OUT)))
p + geom_line() + xlab("Date") + ylab("Daily Outflow (cfs)")
# Driver Script to connect to the status and trends postgress db
# and plot some data
# check and install packages
packages = c('DBI', 'RPostgres', 'ggplot2','lubridate')
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#setup db connection and connect
usr = "usr"
pw <- {"your_password"}
pw <- {"pass"}
con <- dbConnect(RPostgres::Postgres(), dbname = "strends", host = "localhost",
port = 5432, password = pw, user = usr,
bigint = c("integer64", "integer", "numeric", "character"))
# delte the pw from memory
rm(pw)
# check for the flow_index table
table_name = "flow_index"
# construct a SQL query
query_str =paste("SELECT * from", table_name)
# query data and load into a daframe
if(dbExistsTable(con, table_name)==TRUE){
# query the data from postgreSQL
df_postgres <- dbGetQuery(con,query_str )
}
#convert the non standard date col to a date obj for plotting
df_postgres$Datesimple  <-mdy(df_postgres$Date)
#plot the data
p = ggplot(data=df_postgres, aes(x=Datesimple, y=as.numeric(OUT)))
p + geom_line() + xlab("Date") + ylab("Daily Outflow (cfs)")
tablenames_filename = 'tablenames.txt'
?read.csv
tablenames_filename = 'tablenames.txt'
tablenames = read.csv(tablenames_filename)
setwd("~/Python Scripts/strends-report/examples")
tablenames = read.csv(tablenames_filename)
C:\Users\jsaracen\Documents\Python Scripts\strends-report
"C:\Users\jsaracen\Documents\Python Scripts\strends-report"
"C:\\Users\\jsaracen\\Documents\\Python Scripts\\strends-report"
tablenames_filename = "C:\\Users\\jsaracen\\Documents\\Python Scripts\\strends-report\\examples\\tablenames.txt"
tablenames = read.csv(tablenames_filename)
tablenames_filename = "C:\\Users\\jsaracen\\Documents\\Python Scripts\\strends-report\\src\\tablenames.txt"
tablenames = read.csv(tablenames_filename)
